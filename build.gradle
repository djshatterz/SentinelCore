plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
    id 'java'
    id 'com.diffplug.spotless' version '6.25.0'
}

spotless {
    java {
        googleJavaFormat('1.17.0')
        target 'src/**/*.java'
    }
}

version = project.mod_version
group   = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    // you can keep a client source set even if you don't use it
    splitEnvironmentSourceSets()

    mods {
        "sentinelcore" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

/*
 * If you actually use Fabric API data generation, you can uncomment this block.
 * It requires the Fabric API datagen setup in your project.
 *
fabricApi {
    configureDataGeneration {
        client = true
    }
}
*/

repositories {
    mavenCentral()
    maven { url = "https://maven.fabricmc.net/" } // Fabric / Loom
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" } // you had this
    maven { url = "https://repo.papermc.io/repository/maven-public/" } // LuckPerms API
    maven { url = "https://jitpack.io" } // fallback if needed
}

dependencies {
    // Versions are defined in gradle.properties
    minecraft      "com.mojang:minecraft:${project.minecraft_version}"
    mappings       "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API for 1.21.10
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // LuckPerms: compile against API; runtime jar goes in the server /mods folder
    compileOnly "net.luckperms:api:${project.luckperms_api_version}"

    implementation("com.fasterxml.jackson.core:jackson-databind:2.17.2")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.2")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2")
}

// Auto-create EULA and server.properties before runServer
tasks.named("runServer") { t ->
    doFirst {
        // Prefer the task's workingDir if Loom sets it; otherwise use project directory / run
        File runDir = (t.hasProperty('workingDir') && t.workingDir instanceof File && t.workingDir)
                ? t.workingDir as File
                : layout.projectDirectory.dir("run").asFile

        if (!runDir.exists()) {
            runDir.mkdirs()
        }

        File eula = new File(runDir, "eula.txt")
        if (!eula.exists()) {
            eula.text = "eula=true" + System.lineSeparator()
            println "Created ${eula.absolutePath}"
        }

        File props = new File(runDir, "server.properties")
        if (!props.exists()) {
            props.text = """#Minecraft server properties
motd=SentinelCore Dev
server-port=25565
online-mode=false
max-players=20
"""
            println "Created ${props.absolutePath}"
        }
    }
}


processResources {
    inputs.property "version",           project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version",    project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand(
            "version":            project.version,
            "minecraft_version":  project.minecraft_version,
            "loader_version":     project.loader_version
        )
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
    repositories {
        // Add publishing targets if/when you need them
    }
}
